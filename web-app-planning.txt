
1. Update Each Class to Send Status Updates

    All major classes (App, Processor, Salesforce, Box, AI) need to send status updates to web_ui.py in the structured format.

    1.1. Implement a Status Update Method in Each Class
        •	Create a _send_status_update(self, level, status, message, details={}) method inside each class.
        •	Ensure each update follows this JSON structure:
            {
                "timestamp": "2025-02-12T15:31:02Z",
                "source": "Processor",
                "level": "Video",
                "status": "Processing",
                "message": "Extracting frames",
                "details": {
                    "stage": "frame_extraction",
                    "progress": 0.2,
                    "frames_extracted": 20,
                    "total_frames": 100
                }
            }
        •	Use WebSockets (or HTTP if WebSockets aren’t implemented yet) to send this update to web_ui.py.

    1.2. Update Monitoring Loop in App Class
        •	Modify monitoring_loop() in App:
        •	Send a "monitoring active" update when started.
        •	Periodically send "monitoring idle" updates if no new files are found.
        •	Send "new files found" with file count when it detects new videos.

    1.3. Modify Processor Class to Send Status Updates
        •	Update pipeline() to send status updates for:
        •	"Starting processing for file XYZ.mp4"
        •	"Extracting frames" (with frame count progress)
        •	"Completed frame extraction"
        •	"Running AI analysis"

    1.4. Update AI Class to Send Updates
        •	Status updates for:
        •	"AI processing started"
        •	"Running object detection"
        •	"Identified X objects"
        •	"AI processing completed"

    1.5. Update Box Class to Send Updates
        •	"Checking Box for new files"
        •	"Downloading file XYZ.mp4"
        •	"Upload complete"

    1.6. Update Salesforce Class to Send Updates
        •	"Uploading results to Salesforce"
        •	"Salesforce record created: SF-001234"


2. Implement WebSocket Server in web_ui.py
        •	Set up FastAPI WebSocket server.
        •	Implement WebSocket endpoint to receive updates from all classes.
        •	Store received updates (e.g., in a dictionary or queue for frontend retrieval).


3. Implement Web-Based UI (Frontend)

    3.1. Create index.html
        •	Basic UI with:
        •	A status display area (to show monitoring, processing, etc.).
        •	A control panel (buttons to start/stop monitoring).

    3.2. Implement script.js
        •	Establish WebSocket connection to web_ui.py.
        •	Listen for status updates and update the UI dynamically.

    3.3. Style UI in style.css
        •	Create a log display area for structured status updates.
        •	Style buttons for starting/stopping monitoring.


4. Connect Everything Together

    4.1. Test Status Updates
        •	Manually trigger different status updates in each class.
        •	Verify that web_ui.py receives them.
        •	Ensure script.js correctly updates the UI.

    4.2. Add Debugging Logs
        •	Log WebSocket messages for debugging.
        •	Print structured status updates in web_ui.py.



    5. Future Enhancements (Optional)
        •	Add filtering options to the UI (e.g., show only errors, AI processing, etc.).
        •	Improve UI styling with progress bars.
        •	Implement additional WebSocket interactions (e.g., frame review, AI config updates).







### DESIGNING A WEB-BASED UI FOR THE ROAD HEALTH ANALYZER ###

Key things: 
main.py's App() contains a monitoring_loop() function that handles periodically checking Box for new files and triggering pipeline() function if new unprocessed videos are found
main.py's App.pipeline function invokes functions from the Processor(), Salesforce(), Box(), and AI() class instances. 

UI needs to be able to receive status updates from all classes (App, Processor, Salesforce, Box, and AI) to provide a sufficiently granular status report


Idea: 
web_ui.py
- FastAPI App
-   - WebSocket and HTTP endpoints
-   - Sends updates when invoked by the other classes (App, Processor, Salesforce, Box, and AI) to the frontend
-   - Starting: HTTP endpoints to be contacted by buttons on the webpage to control core functions
-   -   - Start monitoring
-   -   - Stop monitoring
-   - Future: WebSocket endpoints or additional HTTP endpoints to enable more interactive controls
-   -   - Select and see frames and analyses
-   -   - Configure/review/update AI instructions


To Do: 
- Define a consistent status update structure for all classes to updates
{
    "timestamp": "2025-02-12T15:31:02Z",
    "source": "Main",
    "level": "asdf",
    "status": "adsf",
    "message": "asdfasdf",
    "details": {
        "sample_detail_1": "asdfasdfasdf",
        "sample_detail_2": "asdfasdf",
        "sample_detail_3": "asdfasdfasdfasdfasdf"
    }
}


Example status update for mid-pipeline: 
{
    "timestamp": "2025-02-12T15:31:02Z",
    "source": "Processor",
    "level": "Video",
    "status": "Processing",
    "message": "Extracting frames",
    "details": {
        "stage": "frame_extraction",
        "progress": "0.2",
        "frames_extracted": "20",
        "total_frames": "100"
    }
}


index.html
script.js
style.css